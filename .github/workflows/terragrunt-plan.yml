name: 'Terragrunt Plan'

on:
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.detect_changes.outputs.directories }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Identify changed files in infra directory
        id: detect_changes
        run: |
          git fetch --unshallow || true
          git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1000 || true

          git checkout ${{ github.event.pull_request.base.ref }} || git checkout -b ${{ github.event.pull_request.base.ref }} origin/${{ github.event.pull_request.base.ref }}

          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...${{ github.sha }} -- 'infra/**' || true)

          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No changes detected in infra directory."
            echo "directories=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Changed files: $CHANGED_FILES"

          UNIQUE_DIRS=$(echo "$CHANGED_FILES" | xargs -n1 dirname | sort -u | jq -R -s -c 'split("\n")[:-1]')
          echo "directories=$UNIQUE_DIRS" >> $GITHUB_OUTPUT

  terragrunt:
    needs: changes
    name: "Terragrunt"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{ fromJSON(needs.changes.outputs.directories) }}
    defaults:
      run:
        working-directory: ${{ matrix.directory }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Terragrunt
        uses: gruntwork-io/terragrunt-action@v3
        with:
           tg_version: '0.87.0'
           tofu_version: '1.10.3'

      - name: Terragrunt Init
        id: init
        run: |
          git config --global url."https://oauth2:${{ secrets.MYTC }}@github.com".insteadOf https://github.com
          terragrunt init --backend-bootstrap --non-interactive
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        continue-on-error: true

      - name: Terragrunt Plan
        id: plan
        run: |
          set -o pipefail
          terragrunt plan -no-color --non-interactive \
            > >(tee plan.out) \
            2> >(tee plan_error.out >&2)
          
          # Strip ANSI escape codes
          sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" plan.out > plan_clean.out
          sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" plan_error.out > plan_error_clean.out

          echo "stdout<<EOF" >> $GITHUB_OUTPUT
          cat plan_clean.out >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "stderr<<EOF" >> $GITHUB_OUTPUT
          cat plan_error_clean.out >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
          ERROR: "${{ steps.plan.outputs.stderr }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const dir = "${{ matrix.directory }}";
            const outcome = "${{ steps.plan.outcome }}";

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(c =>
              c.user.type === 'Bot' && c.body.includes(`Terragrunt Plan (${dir})`)
            );

            let output = `#### Terragrunt Plan üìñ (${dir}) **${outcome.toUpperCase()}**\n`;

            if (process.env.PLAN) {
              output += `\n<details><summary>Show Plan</summary>\n\n\`\`\`\n${process.env.PLAN}\n\`\`\`\n</details>`;
            }

            if (outcome !== "success" && process.env.ERROR) {
              output += `\n‚ö†Ô∏è **Error Output:**\n\n\`\`\`\n${process.env.ERROR}\n\`\`\``;
            }

            output += `\n\n*Pusher: @${{ github.actor }}, Directory: \`${dir}\`*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
